項目名の定義

＝＝＝＝＝ SIDfm ＝＝＝＝＝
SIDfmId
タイトル
CVE番号
CVSS基本値
攻撃元
攻撃成立条件
攻撃前の認証
情報漏えい
情報改ざん
業務停止
攻撃コードの有無
情報登録日
対象製品名
対象製品見出し名

edmxを削除してプロジェクトから追加で作成した。
＝＝＝＝＝ ADO.Net Entity Data Modelでできるもの ＝＝＝＝＝
SIDfm.edmx
	SIDfm.Context.tt ⇒ contextクラスファイルのテンプレート
		SIDfm.Context.cs(SIDfmEntitiesクラス)
	SIDfm.Disigner.cs
	SIDfm.edmx.diagram
	SIDfm.tt ⇒ beanクラスファイルのテンプレート
		SIDfm.cs(SIDfmクラス)
		SIDfm1.cs

データセットは不要
⇒コネクションっぽい？
xsdは何？

===== ソフトウェア種類と情報登録日 =====
管理の仕方をどうするか？

===== Validator =====
値⇒Form
設定（入力ルール）⇒Validator
処理（設定をもらって実行）⇒Validator
結果⇒Validator

===== CSVの入力項目 =====
        public string SIDfmId { get; set; }                  // 必須、数値
        public string タイトル { get; set; }                // 必須
        public string CVE番号 { get; set; }               // 必須
        public string CVSS基本値 { get; set; }             // 数値(小数点未満あり)
        public string 攻撃元_ローカル { get; set; }        // 0か1
        public string 攻撃元_隣接 { get; set; }          // 0か1
        public string 攻撃元_ネットワーク { get; set; }  // 0か1
        public string 攻撃成立条件_難しい { get; set; }  // 0か1
        public string 攻撃成立条件_やや難 { get; set; }  // 0か1
        public string 攻撃成立条件_簡単 { get; set; }   // 0か1
        public string 攻撃前の認証_複数 { get; set; }   // 0か1
        public string 攻撃前の認証_単一 { get; set; }   // 0か1
        public string 攻撃前の認証_不要 { get; set; }   // 0か1
        public string 情報漏えい_影響無し { get; set; }  // 0か1
        public string 情報漏えい_部分的 { get; set; }       // 0か1
        public string 情報漏えい_全面的 { get; set; }   // 0か1
        public string 情報改ざん_影響無し { get; set; }  // 0か1
        public string 情報改ざん_部分的 { get; set; }   // 0か1
        public string 情報改ざん_全面的 { get; set; }   // 0か1
        public string 業務停止_影響無し { get; set; }   // 0か1
        public string 業務停止_部分的 { get; set; }    // 0か1
        public string 業務停止_全面的 { get; set; }    // 0か1
        public string 攻撃コードの有無 { get; set; }    // 0か1
        public string 情報登録日 { get; set; }           // 日付
        public string[] 対象製品パッチ登録日 { get; set; }

1件ごとにValidateエラーのインスタンスを生成
1件⇒csvなら1行、画面なら1アイテム⇒キー項目が違う。csvなら行番号、画面ならId？キーいらないかも

ValidateError⇒1件ごと、SIDfmのキーは入れておく
CSVValidateError⇒1行ごと（拡張）、列名があると良いね。

CSVValidateError
　行、IDペア ※キー
	CSV列 <List>
		ルール＜List＞：エラー＜List＞

===== app.configの中身 =====
#アプリケーション構成ファイル
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <appSettings>
        <add key="Application Name" value="MyApplication" />
        <add key="Application Version" value="1.0.0.0" />
        <add key="Comment" value="Hoge Hoge" />
    </appSettings>
</configuration>

https://msdn.microsoft.com/ja-jp/library/1fk1t1t0(v=vs.110).aspx

https://msdn.microsoft.com/ja-jp/data/jj556606.aspx
※EF4.3の資料

Entity Framework では、多数の設定を構成ファイルで指定できます。
通常、EF は「設定より規約」の原則に従います。
この投稿で説明されているすべての設定には既定の動作があり、
考慮する必要があるのは、既定の動作では要件を満たさない場合に設定を変更することだけです。

https://msdn.microsoft.com/ja-jp/data/jj614582
用語集

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
entityFramework セクションは、EntityFramework NuGet パッケージをインストールしたときに、
プロジェクトの構成ファイルに自動的に追加されています。

<?xml version="1.0" encoding="utf-8"?> 
<configuration> 
  <configSections> 
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --> 
    <section name="entityFramework" 
       type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=4.3.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /> 
  </configSections> 
</configuration>

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
接続文字列は標準の connectionStrings 要素に含まれ、entityFramework セクションは必要ありません。

Code First ベースのモデルは、通常の ADO.NET 接続文字列を使用します。次に例を示します。

<connectionStrings> 
  <add name="BlogContext"  
        providerName="System.Data.SqlClient"  
        connectionString="Server=.\SQLEXPRESS;Database=Blogging;Integrated Security=True;"/> 
</connectionStrings>
EF デザイナー ベースのモデルは、特殊な EF 接続文字列を使用します。次に例を示します。

<connectionStrings> 
  <add name="BlogContext"  
        connectionString="metadata=res://*/BloggingModel.csdl| 
                                   res://*/BloggingModel.ssdl| 
                                   res://*/BloggingModel.msl; 
                                           provider=System.Data.SqlClient 
                                           provider connection string= 
                                               &quot;data source=(localdb)\v11.0; 
                                               initial catalog=Blogging; 
                                               integrated security=True; 
                                               multipleactiveresultsets=True;&quot;" 
     providerName="System.Data.EntityClient" /> 
</connectionStrings>

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
このトピックでは、Entity Framework で使用するデータベース接続がどのように検出されるか、およびその変更方法について説明します。ここでは、Code First で作成されるモデルと、EF デザイナーで作成されるモデルの両方について取り上げます。

通常、Entity Framework アプリケーションでは DbContext から派生したクラスを使用します。この派生クラスは、基本 DbContext クラスのコンストラクターの 1 つを呼び出して、次の動作を制御します。

コンテキストからデータベースへの接続方法 (接続文字列がどのように検出および使用されるか)
コンテキストで Code First を使用してモデルを計算するのか、それとも EF デザイナーで作成されたモデルを読み込むのか
その他の高度なオプション


アプリケーションで他の構成をまったく行っていない場合は、
使用するデータベース名を指定して DbContext の文字列コンストラクターを呼び出すと、
その名前のデータベースへの接続が規約によって作成され、
その接続を使用して DbContext が Code First モードで実行されます。

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ファクトリ ベースのクラスをサポートする各 .NET Framework データ プロバイダーは、
ローカル コンピューターの machine.config ファイルの 
DbProviderFactories セクションに構成情報を登録します。

<system.data>
  <DbProviderFactories>
    <add name="SqlClient Data Provider"
     invariant="System.Data.SqlClient" 
     description=".Net Framework Data Provider for SqlServer" 
     type="System.Data.SqlClient.SqlClientFactory, System.Data, 
     Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
    />
  </DbProviderFactories>
</system.data>
基になるデータ プロバイダーは invariant 属性によって識別されます。 
この 3 つの部分から成る命名構文は、
新しいファクトリを作成するときのほか、
プロバイダー名とそれに関連付けられた接続文字列を実行時に取得できるようにするために、
アプリケーションの構成ファイルでプロバイダーを指定するときにも使用されます。

name
データ プロバイダーの読み取り可能な名前
description
データ プロバイダーの読み取り可能な説明
InvariantName
プログラムでデータ プロバイダーの参照に使用できる名前
AssemblyQualifiedName
オブジェクトをインスタンス化するための十分な情報を保持している、ファクトリ クラスの完全修飾名
例：System.Data.SqlClient.SqlClientFactory, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089

=====================================
Entity Frameworkのコード・ファースト開発で、
最初に知っておかなければならない規則はごくわずかで、また、シンプルなものだ。

・クラス（単数形）は、同名のテーブル（複数形）にマッピングされる
・プロパティは、同名のテーブル列にマッピングされる
・主キーは、Id、または＜クラス名＞Idという名前がデフォルト（例：ReviewId）
　上記以外の主キーを定義するには、Key属性（System.ComponentModel.DataAnnotations名前空間）
　を付けてプロパティを定義する（例：Isbn）
・nullを許容する値型の列は、null許容型で指定する（例：Price）
・ナビゲーション・プロパティは、同名のエンティティにマッピングされる（例：Reviews）
　ナビゲーション・プロパティとは、あるエンティティと関連（アソシエーション）を持った、別のエンティティを参照するためのプロパティのこと。

=====================================
Entity Framework のナビゲーション プロパティは、2 つのエンティティ型間のアソシエーションを操作するための機能です。 